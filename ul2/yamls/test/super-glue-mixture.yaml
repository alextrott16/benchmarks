# Use this YAML to verify that boolq (a SuperGLUE task) fine-tuning works. Runs on CPU or GPUs (if available).
# From `benchmarks/ul2`, run: 
#   `composer main.py yamls/test/boolq.yaml` to run using the HuggingFace T5

tokenizer_name: &tokenizer_name t5-small
max_seq_len: &max_seq_len 128
tasks: &tasks
- boolq
- copa
- cb

# Run Name
run_name: test

# Model
model:
  name: hf_t5
  use_pretrained: true # Train the model from scratch. Set to true to start from the HF off-the-shelf weights.
  pretrained_model_name: *tokenizer_name
  tokenizer_name: *tokenizer_name
  z_loss: 0.0001
  task_finetuning: true

# Dataloaders
train_loader:
  name: super_glue
  dataset:
    task: *tasks
    split: train
    tokenizer_name: *tokenizer_name
    max_seq_length: *max_seq_len
  shuffle: true
  drop_last: true
  num_workers: 0
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: false
  timeout: 0

eval_loader:
  name: super_glue
  dataset:
    task: *tasks
    split: validation
    tokenizer_name: *tokenizer_name
    max_seq_length: *max_seq_len
  shuffle: true
  drop_last: true
  num_workers: 0
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: false
  timeout: 0

global_train_batch_size: 4

# Optimization
scheduler:
  name: constant_with_warmup # UL2 paper calls for constant LR when fine-tuning
  t_warmup: 10ba

optimizer:
  name: adafactor # UL2 paper calls for Adafactor w/ unknown HPs
  lr: 0.0001 # Actual LR determined by scheduler
  weight_decay: 0.0 # Amount of weight decay regularization
  scale_parameter: false

grad_clip_norm: -1.0

# Training duration and evaluation frequency
max_duration: 10ba
eval_interval: 10ba
eval_subset_num_batches: 20 # For code testing, evaluate on a subset of 20 batches

# System
seed: 17
grad_accum: 1
precision: fp32

# Logging
progress_bar: true
log_to_console: true

callbacks:
  lr_monitor: {}